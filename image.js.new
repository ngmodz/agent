document.addEventListener('DOMContentLoaded', () => {
    // Get DOM elements
    const mainForm = document.getElementById('mainForm');
    const formatSelection = document.getElementById('formatSelection');
    const canvasContainer = document.getElementById('canvasContainer');
    const submitFormBtn = document.getElementById('submitForm');
    const downloadBtn = document.getElementById('downloadBtn');
    const imageCanvas = document.getElementById('imageCanvas');
    
    // Form input elements
    const categoryInput = document.getElementById('category');
    const serviceNameInput = document.getElementById('serviceName');
    const priceInput = document.getElementById('price');
    const quantityInput = document.getElementById('quantity');
    
    // Format options
    const formatOptions = document.querySelectorAll('.format-option');
    
    // SVG Logos
    const facebookLogoSVG = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36" fill="url(#a)" height="40" width="40"><defs><linearGradient x1="50%" x2="50%" y1="97.078%" y2="0%" id="a"><stop offset="0%" stop-color="#0062E0"/><stop offset="100%" stop-color="#19AFFF"/></linearGradient></defs><path d="M15 35.8C6.5 34.3 0 26.9 0 18 0 8.1 8.1 0 18 0s18 8.1 18 18c0 8.9-6.5 16.3-15 17.8l-1-.8h-4l-1 .8z"/><path fill="#FFF" d="m25 23 .8-5H21v-3.5c0-1.4.5-2.5 2.7-2.5H26V7.4c-1.3-.2-2.7-.4-4-.4-4.1 0-7 2.5-7 7v4h-4.5v5H15v12.7c1 .2 2 .3 3 .3s2-.1 3-.3V23h4z"/></svg>`;
    const instagramLogoSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" preserveAspectRatio="xMidYMid" viewBox="0 0 256 256"><path fill="#0A0A08" d="M128 23.064c34.177 0 38.225.13 51.722.745 12.48.57 19.258 2.655 23.769 4.408 5.974 2.322 10.238 5.096 14.717 9.575 4.48 4.479 7.253 8.743 9.575 14.717 1.753 4.511 3.838 11.289 4.408 23.768.615 13.498.745 17.546.745 51.723 0 34.178-.13 38.226-.745 51.723-.57 12.48-2.655 19.257-4.408 23.768-2.322 5.974-5.096 10.239-9.575 14.718-4.479 4.479-8.743 7.253-14.717 9.574-4.511 1.753-11.289 3.839-23.769 4.408-13.495.616-17.543.746-51.722.746-34.18 0-38.228-.13-51.723-.746-12.48-.57-19.257-2.655-23.768-4.408-5.974-2.321-10.239-5.095-14.718-9.574-4.479-4.48-7.253-8.744-9.574-14.718-1.753-4.51-3.839-11.288-4.408-23.768-.616-13.497-.746-17.545-.746-51.723 0-34.177.13-38.225.746-51.722.57-12.48 2.655-19.258 4.408-23.769 2.321-5.974 5.095-10.238 9.574-14.717 4.48-4.48 8.744-7.253 14.718-9.575 4.51-1.753 11.288-3.838 23.768-4.408 13.497-.615 17.545-.745 51.723-.745M128 0C93.237 0 88.878.147 75.226.77c-13.625.622-22.93 2.786-31.071 5.95-8.418 3.271-15.556 7.648-22.672 14.764C14.367 28.6 9.991 35.738 6.72 44.155 3.555 52.297 1.392 61.602.77 75.226.147 88.878 0 93.237 0 128c0 34.763.147 39.122.77 52.774.622 13.625 2.785 22.93 5.95 31.071 3.27 8.417 7.647 15.556 14.763 22.672 7.116 7.116 14.254 11.492 22.672 14.763 8.142 3.165 17.446 5.328 31.07 5.95 13.653.623 18.012.77 52.775.77s39.122-.147 52.774-.77c13.624-.622 22.929-2.785 31.07-5.95 8.418-3.27 15.556-7.647 22.672-14.763 7.116-7.116 11.493-14.254 14.764-22.672 3.164-8.142 5.328-17.446 5.95-31.07.623-13.653.77-18.012.77-52.775s-.147-39.122-.77-52.774c-.622-13.624-2.786-22.929-5.95-31.07-3.271-8.418-7.648-15.556-14.764-22.672C227.4 14.368 220.262 9.99 211.845 6.72c-8.142-3.164-17.447-5.328-31.071-5.95C167.122.147 162.763 0 128 0Zm0 62.27C91.698 62.27 62.27 91.7 62.27 128c0 36.302 29.428 65.73 65.73 65.73 36.301 0 65.73-29.428 65.73-65.73 0-36.301-29.429-65.73-65.73-65.73Zm0 108.397c-23.564 0-42.667-19.103-42.667-42.667S104.436 85.333 128 85.333s42.667 19.103 42.667 42.667-19.103 42.667-42.667 42.667Zm83.686-110.994c0 8.484-6.876 15.36-15.36 15.36-8.483 0-15.36-6.876-15.36-15.36 0-8.483 6.877-15.36 15.36-15.36 8.484 0 15.36 6.877 15.36 15.36Z"/></svg>`;
    const youtubeLogoSVG = `<svg viewBox="0 0 256 180" width="256" height="180" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid"><path d="M250.346 28.075A32.18 32.18 0 0 0 227.69 5.418C207.824 0 127.87 0 127.87 0S47.912.164 28.046 5.582A32.18 32.18 0 0 0 5.39 28.24c-6.009 35.298-8.34 89.084.165 122.97a32.18 32.18 0 0 0 22.656 22.657c19.866 5.418 99.822 5.418 99.822 5.418s79.955 0 99.82-5.418a32.18 32.18 0 0 0 22.657-22.657c6.338-35.348 8.291-89.1-.164-123.134Z" fill="red"/><path fill="#FFF" d="m102.421 128.06 66.328-38.418-66.328-38.418z"/></svg>`;
    
    // Form data storage
    let formData = {
        category: '',
        serviceName: '',
        price: 0,
        quantity: 0,
        format: ''
    };
    
    // Event listeners
    submitFormBtn.addEventListener('click', handleFormSubmit);
    formatOptions.forEach(option => {
        option.addEventListener('click', handleFormatSelection);
    });
    downloadBtn.addEventListener('click', handleDownload);
    
    // Handle main form submission
    function handleFormSubmit(e) {
        e.preventDefault();
        
        // Validate form
        if (!validateForm()) {
            return;
        }
        
        // Store form data
        formData.category = categoryInput.value;
        formData.serviceName = serviceNameInput.value;
        formData.price = parseFloat(priceInput.value);
        formData.quantity = parseInt(quantityInput.value);
        
        // Hide main form and show format selection
        mainForm.style.display = 'none';
        formatSelection.style.display = 'block';
    }
    
    // Validate form inputs
    function validateForm() {
        let isValid = true;
        
        if (!serviceNameInput.value.trim()) {
            alert('Please enter a service name');
            serviceNameInput.focus();
            isValid = false;
        } else if (!priceInput.value || isNaN(parseFloat(priceInput.value)) || parseFloat(priceInput.value) < 0) {
            alert('Please enter a valid price');
            priceInput.focus();
            isValid = false;
        } else if (!quantityInput.value || isNaN(parseInt(quantityInput.value)) || parseInt(quantityInput.value) < 1) {
            alert('Please enter a valid quantity');
            quantityInput.focus();
            isValid = false;
        }
        
        return isValid;
    }
    
    // Handle format selection
    function handleFormatSelection(e) {
        // Remove selected class from all options
        formatOptions.forEach(option => {
            option.classList.remove('selected');
        });
        
        // Add selected class to clicked option
        const selectedOption = e.currentTarget;
        selectedOption.classList.add('selected');
        
        // Store selected format
        formData.format = selectedOption.dataset.format;
        
        // Generate image
        generateImage();
        
        // Show canvas container
        formatSelection.style.display = 'none';
        canvasContainer.style.display = 'block';
    }
    
    // Generate image based on form data and selected format
    function generateImage() {
        const ctx = imageCanvas.getContext('2d');
        let width, height;
        
        // Set canvas dimensions based on selected format
        switch (formData.format) {
            case 'square':
                width = 1080;
                height = 1080;
                break;
            case 'landscape':
                width = 1920;
                height = 1080;
                break;
            case 'portrait':
                width = 1080;
                height = 1920;
                break;
            default:
                width = 1080;
                height = 1080;
        }
        
        // Set canvas dimensions
        imageCanvas.width = width;
        imageCanvas.height = height;
        
        // Draw pure white background
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, width, height);
        
        // Draw black text content
        drawBlackTextContent(ctx, width, height);
    }
    
    // Draw content with black text on white background
    function drawBlackTextContent(ctx, width, height) {
        // Set black text color
        ctx.fillStyle = '#000000';
        const titleSize = Math.floor(width * 0.07); // Adjusted title size
        const subtitleSize = Math.floor(width * 0.045);
        const detailSize = Math.floor(width * 0.04);
        ctx.textAlign = 'center';

        const logoSize = Math.floor(width * 0.12); // Standardized logo size (12% of width)
        const logoX = width / 2 - logoSize / 2;
        const logoY = height * 0.15; // Position logo 15% from the top

        function drawLogo(svgString) {
            const img = new Image();
            img.onload = function() {
                ctx.drawImage(img, logoX, logoY, logoSize, logoSize);
                drawRemainingContent(); // Draw other text after logo loads
            };
            const svgBlob = new Blob([svgString], {type: 'image/svg+xml;charset=utf-8'});
            const url = URL.createObjectURL(svgBlob);
            img.src = url;
            img.onloadend = () => URL.revokeObjectURL(url); // Clean up blob URL
        }

        if (formData.category === 'Instagram') {
            drawLogo(instagramLogoSVG);
        } else if (formData.category === 'Facebook') {
            drawLogo(facebookLogoSVG);
        } else if (formData.category === 'YouTube') {
            drawLogo(youtubeLogoSVG);
        } else {
            // Draw the category name as text for other categories
            ctx.font = `bold ${titleSize}px Arial`;
            ctx.fillText(formData.category, width / 2, height * 0.25); // Y position for text if no logo
            drawRemainingContent(); // Draw other text immediately
        }
        
        function drawRemainingContent() {
            // Draw service name
            ctx.font = `${subtitleSize}px Arial`;
            
            // Handle long service names by wrapping text
            const maxLineWidth = width * 0.8;
            const serviceNameLines = wrapText(ctx, formData.serviceName, maxLineWidth);
            
            // Draw each line of the wrapped service name
            let y = height * 0.4;
            const lineHeight = subtitleSize * 1.2;
            
            serviceNameLines.forEach(line => {
                ctx.fillText(line, width / 2, y);
                y += lineHeight;
            });
            
            // Draw price
            ctx.font = `bold ${detailSize}px Arial`;
            ctx.fillText(`Price: ₹${formData.price.toFixed(2)}`, width / 2, height * 0.65);
            
            // Draw quantity
            ctx.fillText(`Quantity: ${formData.quantity}`, width / 2, height * 0.72);
            
            // Draw watermark
            ctx.font = `${detailSize * 0.7}px Arial`;
            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
            ctx.fillText('Viralgurux', width / 2, height * 0.95);
            
            // Add a thin border
            ctx.strokeStyle = '#DDDDDD';
            ctx.lineWidth = 2;
            ctx.strokeRect(2, 2, width - 4, height - 4);
        }
    }
    
    // Function to wrap text
    function wrapText(ctx, text, maxWidth) {
        const words = text.split(' ');
        const lines = [];
        let currentLine = words[0];
        
        for (let i = 1; i < words.length; i++) {
            const word = words[i];
            const width = ctx.measureText(currentLine + ' ' + word).width;
            
            if (width < maxWidth) {
                currentLine += ' ' + word;
            } else {
                lines.push(currentLine);
                currentLine = word;
            }
        }
        
        lines.push(currentLine);
        return lines;
    }
    
    // Handle image download
    function handleDownload() {
        // Create a temporary link
        const link = document.createElement('a');
        
        // Set download attributes
        link.download = `${formData.category}-${formData.serviceName.substring(0, 10)}.png`;
        link.href = imageCanvas.toDataURL('image/png');
        
        // Trigger download
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
});
